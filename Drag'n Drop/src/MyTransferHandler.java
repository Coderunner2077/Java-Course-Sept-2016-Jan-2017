import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DropTarget;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;
import java.io.IOException;

import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.TransferHandler;

public class MyTransferHandler extends TransferHandler {
	
	/**
	  * Méthode permettant à l'objet de savoir si les données reçues
	  * via un drop sont autorisées à être importées
	  * @param info
	  * @return boolean
	  */
	  public boolean canImport(TransferHandler.TransferSupport info) {
		//Nous contrôlons si les données reçues sont d'un type autorisé, ici String
		  if(!info.isDataFlavorSupported(DataFlavor.stringFlavor))
			  return false;
		  return true;
	  }

	  /**
	  * C'est ici que l'insertion des données dans notre composant est réalisée
	  * @param support
	  * @return boolean
	  */
	  public boolean importData(TransferHandler.TransferSupport support){
		  //je contrôle si les données reçues sont d'un type autorisé
		  if(!canImport(support))
			  return false;
		  
		  //Je récupère mon objet Transferable, celui qui contient les données en transit
		  Transferable data = support.getTransferable();
		  String str = "";
		  try{
			  //je récupère les données en spécifiant ce que j'attends
			  str = (String)data.getTransferData(DataFlavor.stringFlavor);
		  } catch(UnsupportedFlavorException e){
			  e.printStackTrace();
		  }catch(IOException e){
			  e.printStackTrace();
		  }
		  
		  //Via le TransfertSupport, je peux récupérer mon composant
		  JLabel lab = (JLabel)support.getComponent(); //!!!!!!
		  //afin de lui affecter sa nouvelle valeur
		  lab.setText(str);
		  
		  return false;
	  }

	  /**
	  * Cette méthode est invoquée à la fin de l'action DROP
	  * Si des actions sont à faire ensuite, c'est ici qu'il faudra coder le comportement désiré
	  * @param c
	  * @param t
	  * @param action
	  */
	  protected void exportDone(JComponent c, Transferable t, int action){
		  // Une fois le drop effectué, j'efface le contenu de mon JLabel
		  if(action == MOVE)
			  ((JLabel)c).setText("");
	  }
	  
	 
	  /**
	  * Dans cette méthode, nous allons créer l'objet utilisé par le système de drag'n drop
	  * afin de faire circuler les données entre les composants
	  * Vous pouvez voir qu'il s'agit d'un objet de type Transferable
	  * @param c
	  * @return
	  */
	  protected Transferable createTransferable(JComponent c){
		  //on retourne un nouvel objet implémentant l'interface Transferable 
		  //StringSelection implémente cette interface
		  
		  return new StringSelection(((JLabel)c).getText()); // !!!!!!!!!
		  
	  } 

	  /**
	  * Cette méthode est utilisée afin de déterminer le comportement 
	  * du composant vis-à-vis du drag'n drop : nous retrouverons
	  * nos variables statiques COPY, MOVE, COPY_OR_MOVE, LINK ou NONE 
	  * @param c
	  * @return int
	  */
	  public int getSourceActions(JComponent c){
		  //Je n'autorise que le déplacement ici
		  return MOVE;
	  }
	  

}
